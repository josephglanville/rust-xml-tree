var searchIndex = {};
searchIndex['xml_tree'] = {"items":[[0,"","xml_tree",""],[11,"new","xml::reader","Creates a new parser, consuming given `Buffer`.",0],[11,"new_with_config","","Creates a new parser with the provded configuration, consuming given `Buffer`.",0],[11,"next","","Pulls and returns next XML event from the stream.",0],[11,"events","","Returns an iterator over XML events.",0],[11,"new_from_string","","Convenience method to create a reader from an owned string.",0],[11,"new_from_bytes","","Convenience method to create a reader from an owned vector of bytes.",0],[11,"new_from_str_slice","","Convenience method to create a reader from a string slice.",0],[11,"new_from_bytes_slice","","Convenience method to create a reader from a slice of bytes.",0],[11,"fmt","xml::name","",1],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"fmt","","",1],[11,"to_owned","","Returns an owned variant of the qualified name.",1],[11,"local","","Returns a new `Name` instance representing plain local name.",1],[11,"qualified","","Returns a new `Name` instance representing a qualified name with or without a prefix and\nwith a namespace URI.",1],[11,"to_repr","","Returns correct XML representation of this local name and prefix.",1],[11,"fmt","","",2],[11,"hash","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"fmt","","",2],[11,"borrow","","Constructs a borrowed `Name` based on this owned name.",2],[11,"local","","Returns a new `OwnedName` instance representing a plain local name.",2],[11,"qualified","","Returns a new `OwnedName` instance representing a qualified name with or without\na prefix and with a namespace URI.",2],[11,"prefix_as_ref","","Returns an optional prefix by reference, equivalent to `self.borrow().prefix`\nbut avoids extra work.",2],[11,"namespace_as_ref","","Returns an optional namespace by reference, equivalen to `self.borrow().namespace`\nbut avoids extra work.",2],[11,"to_repr","","See `Name::to_repr()` for details.",2],[6,"Err","xml_tree",""],[11,"from_str","xml::name","Parses the given string slice into a qualified name.",2],[11,"fmt","xml::attribute","",3],[11,"hash","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"fmt","","",3],[11,"to_owned","","",3],[11,"new","","",3],[11,"fmt","","",4],[11,"hash","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"borrow","","",4],[11,"new","","",4],[11,"fmt","","",4],[11,"fmt","xml::common","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"clone","","",5],[11,"fmt","","",5],[11,"row","","",5],[11,"col","","",5],[11,"new","","Creates a new error using position information from the provided\n`HasPosition` object and a message.",5],[11,"new_full","","Creates a new error using provided position information and a message.",5],[11,"msg","","Returns a reference to a message which is contained inside this error.",5],[11,"description","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"fmt","","",6],[11,"extend","xml::escape","",7],[11,"clone","xml::namespace","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"empty","","Returns an empty namespace.",8],[11,"is_empty","","Checks whether this namespace is empty.",8],[11,"is_essentially_empty","","Checks whether this namespace is essentially empty, that is, it does not contain\nanything but the default mappings.",8],[11,"put","","Puts a mapping into this namespace.",8],[11,"force_put","","Puts a mapping into this namespace forcefully.",8],[11,"get","","Queries the namespace for the given prefix.",8],[6,"Item","xml_tree",""],[11,"next","xml::namespace","",9],[6,"Iter","xml_tree",""],[11,"uri_mappings","xml::namespace","",8],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",10],[11,"empty","","Returns an empty namespace stack.",10],[11,"default","","Returns a namespace stack with default items in it.",10],[11,"push_empty","","Adds an empty namespace to the top of this stack.",10],[11,"pop","","Removes a namespace at the top of the stack.",10],[11,"peek","","Returns a namespace at the top of the stack, leaving the stack intact.",10],[11,"put","","Puts a mapping into the topmost namespace in this stack.",10],[11,"get","","Performs a search for the given prefix in the whole stack.",10],[11,"squash","","Combines this stack of namespaces into a single namespace.",10],[6,"Item","xml_tree",""],[11,"next","xml::namespace","",11],[6,"Iter","xml_tree",""],[11,"uri_mappings","xml::namespace","",10],[11,"fmt","xml::reader::lexer","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",12],[11,"fmt","","",12],[11,"as_static_str","","",12],[11,"contains_char_data","","Returns `true` if this token contains data that can be interpreted\nas a part of the text. Surprisingly, this also means '>' and '=' and '\"' and \"'\".",12],[11,"is_whitespace","","Returns `true` if this token corresponds to a white space character.",12],[11,"row","","Returns current row in the input document.",13],[11,"col","","Returns current column in the document.",13],[11,"enable_errors","","Enables error handling so `next_token` will return `Some(Err(..))`\nupon invalid lexeme.",13],[11,"disable_errors","","Disables error handling so `next_token` will return `Some(Chunk(..))`\nupon invalid lexeme with this lexeme content.",13],[11,"next_token","","Tries to read next token from the buffer.",13],[11,"new","xml::reader::parser","Returns a new parser using the given config.",14],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"eq","","",20],[11,"ne","","",20],[11,"eq","","",21],[11,"ne","","",21],[11,"next","","Returns next event read from the given buffer.",14],[11,"new","xml::reader::config","Returns a new config with default values.",22],[11,"trim_whitespace","","Sets the field to the provided value and returns updated config object.",22],[11,"whitespace_to_characters","","Sets the field to the provided value and returns updated config object.",22],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",22],[11,"ignore_comments","","Sets the field to the provided value and returns updated config object.",22],[11,"coalesce_characters","","Sets the field to the provided value and returns updated config object.",22],[11,"clone","xml::reader::events","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"fmt","","",23],[11,"as_writer_event","","",23],[6,"Item","xml_tree",""],[11,"next","xml::reader","",24],[11,"fmt","xml::writer::emitter","",25],[11,"new","","",26],[11,"hash","","",27],[11,"cmp","","",27],[11,"partial_cmp","","",27],[11,"lt","","",27],[11,"le","","",27],[11,"gt","","",27],[11,"ge","","",27],[11,"clone","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"empty","","Returns an empty set of flags.",27],[11,"all","","Returns the set containing all flags.",27],[11,"bits","","Returns the raw value of the flags currently stored.",27],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",27],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",27],[11,"is_empty","","Returns `true` if no flags are currently stored.",27],[11,"is_all","","Returns `true` if all flags are currently set.",27],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27],[11,"insert","","Inserts the specified flags in-place.",27],[11,"remove","","Removes the specified flags in-place.",27],[11,"toggle","","Toggles the specified flags in-place.",27],[6,"Output","xml_tree",""],[11,"bitor","xml::writer::emitter","Returns the union of the two sets of flags.",27],[6,"Output","xml_tree",""],[11,"bitxor","xml::writer::emitter","Returns the left flags, but with all the right flags toggled.",27],[6,"Output","xml_tree",""],[11,"bitand","xml::writer::emitter","Returns the intersection between the two sets of flags.",27],[6,"Output","xml_tree",""],[11,"sub","xml::writer::emitter","Returns the set difference of the two sets of flags.",27],[6,"Output","xml_tree",""],[11,"not","xml::writer::emitter","Returns the complement of this set of flags.",27],[11,"namespace_stack","","Returns current state of namespaces.",26],[11,"emit_start_document","","",26],[11,"emit_processing_instruction","","",26],[11,"emit_empty_element","","",26],[11,"emit_start_element","","",26],[11,"emit_namespace_attributes","","",26],[11,"emit_attributes","","",26],[11,"emit_end_element","","",26],[11,"emit_cdata","","",26],[11,"emit_characters","","",26],[11,"emit_comment","","",26],[11,"new","xml::writer::config","Creates an emitter configuration with default values.",28],[11,"line_separator","","Sets the field to the provided value and returns updated config object.",28],[11,"indent_string","","Sets the field to the provided value and returns updated config object.",28],[11,"perform_indent","","Sets the field to the provided value and returns updated config object.",28],[11,"write_document_declaration","","Sets the field to the provided value and returns updated config object.",28],[11,"normalize_empty_elements","","Sets the field to the provided value and returns updated config object.",28],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",28],[11,"new","xml::writer","",29],[11,"new_with_config","","",29],[11,"write","","",29],[11,"new_into_mem","","",29],[11,"new_into_mem_config","","",29],[11,"borrow_internals","core::option","",30],[6,"Item","xml_tree",""],[11,"next","xml::util","",31],[3,"EventReader","xml_tree","Simple wrapper around an `std::old_io::Buffer` which provides pull-based XML parsing."],[3,"OwnedAttribute","",""],[12,"name","","",4],[12,"value","","",4],[3,"ParserError","","XML parsing error."],[4,"XmlVersion","","XML version enumeration."],[13,"Version10","","XML version 1.0.",6],[13,"Version11","","XML version 1.1.",6],[3,"OwnedName","","An owned variant of `Name`."],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",2],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",2],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",2],[3,"Namespace","","Namespace is a map from prefixes to namespace URIs."],[3,"ParserConfig","","Parser configuration structure."],[12,"trim_whitespace","","Whether or not should whitespace be removed. Default is false.",22],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters.\nDefault is false.",22],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.\nDefault is false.",22],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",22],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged.\nDefault is true.",22],[4,"XmlEvent","","An element of an XML input stream."],[13,"StartDocument","","Corresponds to XML document declaration.",23],[12,"version","xml_tree::XmlEvent","",23],[12,"encoding","","",23],[12,"standalone","","",23],[13,"EndDocument","xml_tree","Denotes to the end of the document stream.",23],[13,"ProcessingInstruction","","Denotes an XML processing instruction.",23],[12,"name","xml_tree::XmlEvent","",23],[12,"data","","",23],[13,"StartElement","xml_tree","Denotes a beginning of an XML element.",23],[12,"name","xml_tree::XmlEvent","",23],[12,"attributes","","",23],[12,"namespace","","",23],[13,"EndElement","xml_tree","Denotes an end of an XML document.",23],[12,"name","xml_tree::XmlEvent","",23],[13,"CData","xml_tree","Denotes CDATA content.",23],[13,"Comment","","Denotes a comment.",23],[13,"Characters","","Denotes character data outside of tags.",23],[13,"Whitespace","","Denotes a chunk of whitespace outside of tags.",23],[13,"Error","","Denotes parsing error.",23],[3,"Document","","Describes an XML Document."],[12,"version","","",32],[12,"encoding","","",32],[12,"root","","",32],[3,"Element","","Describes an element of the DOM tree."],[12,"parent","","parent element",33],[12,"name","","element name",33],[12,"attributes","","element attributes",33],[12,"namespace","","element namespace",33],[3,"ElementIterator","","Iterator for element nodes."],[3,"Text","","Describes a text node of the DOM tree."],[12,"parent","","parent element",34],[12,"content","","the text node's content",34],[3,"TextIterator","","Iterator for text nodes."],[4,"Node","","Describes a node of the XML tree.\nThe node can be an element or a text node."],[13,"Element","","",35],[13,"Text","","",35],[4,"BuildError","",""],[13,"UndefinedRoot","","",36],[13,"ParserError","","",36],[5,"build","",""],[11,"fmt","","",32],[11,"fmt","","",32],[11,"new","","",33],[11,"new_root","","",33],[11,"add_child","","",33],[11,"len","","Return the number of child nodes.",33],[11,"find","","Find children by name.\nCurrently ignores namespaces.",33],[11,"text","","Get the text nodes of this Element concatenated.",33],[11,"iter","","Create an iterator that yield all children nodes.",33],[11,"iter_elements","","Create an iterator that only yields Node::Element node types.",33],[11,"iter_text","","Create an iterator that only yields Node::Text node types.",33],[11,"format_pretty","","Format the Element in a pretty way.",33],[11,"fmt","","",33],[11,"fmt","","",33],[11,"next","","",37],[11,"format_pretty","","Format the Element in a pretty way.",35],[11,"fmt","","",35],[11,"fmt","","",35],[11,"new","","",34],[11,"format_pretty","","Format the Element in a pretty way.",34],[11,"fmt","","",34],[11,"fmt","","",34],[11,"new","","",38],[11,"next","","",38],[11,"from_error","","",36],[11,"fmt","","",36],[6,"RcElement","","Describes an element with shared ownership."],[6,"WeakElement","","Describes a weak reference to an element."],[6,"RcNode","","Describes a node with shared ownership."]],"paths":[[3,"EventReader"],[3,"Name"],[3,"OwnedName"],[3,"Attribute"],[3,"OwnedAttribute"],[3,"ParserError"],[4,"XmlVersion"],[4,"Process"],[3,"Namespace"],[3,"NamespaceMappings"],[3,"NamespaceStack"],[3,"NamespaceStackMappings"],[4,"Token"],[3,"PullLexer"],[3,"PullParser"],[4,"State"],[4,"OpeningTagSubstate"],[4,"ClosingTagSubstate"],[4,"ProcessingInstructionSubstate"],[4,"DeclarationSubstate"],[4,"QualifiedNameTarget"],[4,"QuoteToken"],[3,"ParserConfig"],[4,"XmlEvent"],[3,"Events"],[3,"EmitterError"],[3,"Emitter"],[3,"IndentFlags"],[3,"EmitterConfig"],[3,"EventWriter"],[4,"Option"],[3,"ClonedPairwise"],[3,"Document"],[3,"Element"],[3,"Text"],[4,"Node"],[4,"BuildError"],[3,"ElementIterator"],[3,"TextIterator"]]};
searchIndex['xml'] = {"items":[[0,"","xml","This crate currently provides almost XML 1.0/1.1-compliant pull parser."],[0,"macros","","Contains several macros used in this crate."],[0,"name","",""],[3,"Name","xml::name","Represents a qualified XML name."],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",0],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",0],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",0],[3,"OwnedName","","An owned variant of `Name`."],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",1],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",1],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",1],[11,"fmt","","",0],[11,"hash","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"fmt","","",0],[11,"to_owned","","Returns an owned variant of the qualified name.",0],[11,"local","","Returns a new `Name` instance representing plain local name.",0],[11,"qualified","","Returns a new `Name` instance representing a qualified name with or without a prefix and\nwith a namespace URI.",0],[11,"to_repr","","Returns correct XML representation of this local name and prefix.",0],[11,"fmt","","",1],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"fmt","","",1],[11,"borrow","","Constructs a borrowed `Name` based on this owned name.",1],[11,"local","","Returns a new `OwnedName` instance representing a plain local name.",1],[11,"qualified","","Returns a new `OwnedName` instance representing a qualified name with or without\na prefix and with a namespace URI.",1],[11,"prefix_as_ref","","Returns an optional prefix by reference, equivalent to `self.borrow().prefix`\nbut avoids extra work.",1],[11,"namespace_as_ref","","Returns an optional namespace by reference, equivalen to `self.borrow().namespace`\nbut avoids extra work.",1],[11,"to_repr","","See `Name::to_repr()` for details.",1],[6,"Err","",""],[11,"from_str","","Parses the given string slice into a qualified name.",1],[0,"attribute","xml",""],[3,"Attribute","xml::attribute","A borrowed version of an XML attribute."],[12,"name","","Attribute name.",2],[12,"value","","Attribute value.",2],[3,"OwnedAttribute","",""],[12,"name","","",3],[12,"value","","",3],[11,"fmt","","",2],[11,"hash","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"fmt","","",2],[11,"to_owned","","",2],[11,"new","","",2],[11,"fmt","","",3],[11,"hash","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"borrow","","",3],[11,"new","","",3],[11,"fmt","","",3],[0,"common","xml","Contains several types used throughout the library."],[3,"Error","xml::common","XML parsing error."],[4,"XmlVersion","","XML version enumeration."],[13,"Version10","","XML version 1.0.",4],[13,"Version11","","XML version 1.1.",4],[5,"is_whitespace_char","","Checks whether the given character is a white space character (`S`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[5,"is_name_start_char","","Checks whether the given character is a name start character (`NameStartChar`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[5,"is_name_char","","Checks whether the given character is a name character (`NameChar`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[8,"HasPosition","","Represents a thing which has a position inside some textual document."],[10,"row","","Returns a line number inside the document.",5],[10,"col","","Returns a column number inside the document.",5],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"fmt","","",6],[11,"row","","",6],[11,"col","","",6],[11,"new","","Creates a new error using position information from the provided\n`HasPosition` object and a message.",6],[11,"new_full","","Creates a new error using provided position information and a message.",6],[11,"msg","","Returns a reference to a message which is contained inside this error.",6],[11,"description","","",6],[11,"eq","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",4],[0,"escape","xml",""],[5,"escape_str","xml::escape","Performs escaping of common XML characters."],[0,"namespace","xml",""],[3,"Namespace","xml::namespace","Namespace is a map from prefixes to namespace URIs."],[3,"NamespaceMappings","","An iterator over mappings from prefixes to URIs in a namespace."],[3,"NamespaceStack","","Namespace stack is a sequence of namespaces."],[3,"NamespaceStackMappings","","An iterator over mappings from prefixes to URIs in a namespace stack."],[6,"UriMapping","",""],[17,"NS_XMLNS_PREFIX","",""],[17,"NS_XMLNS_URI","",""],[17,"NS_XML_PREFIX","",""],[17,"NS_XML_URI","",""],[17,"NS_EMPTY_URI","",""],[8,"NamespaceIterable","","Denotes something which contains namespace URI mappings."],[16,"Iter","xml::namespace::NamespaceIterable",""],[10,"uri_mappings","xml::namespace","",7],[11,"clone","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"empty","","Returns an empty namespace.",8],[11,"is_empty","","Checks whether this namespace is empty.",8],[11,"is_essentially_empty","","Checks whether this namespace is essentially empty, that is, it does not contain\nanything but the default mappings.",8],[11,"put","","Puts a mapping into this namespace.",8],[11,"force_put","","Puts a mapping into this namespace forcefully.",8],[11,"get","","Queries the namespace for the given prefix.",8],[6,"Item","",""],[11,"next","","",9],[6,"Iter","",""],[11,"uri_mappings","","",8],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",10],[11,"empty","","Returns an empty namespace stack.",10],[11,"default","","Returns a namespace stack with default items in it.",10],[11,"push_empty","","Adds an empty namespace to the top of this stack.",10],[11,"pop","","Removes a namespace at the top of the stack.",10],[11,"peek","","Returns a namespace at the top of the stack, leaving the stack intact.",10],[11,"put","","Puts a mapping into the topmost namespace in this stack.",10],[11,"get","","Performs a search for the given prefix in the whole stack.",10],[11,"squash","","Combines this stack of namespaces into a single namespace.",10],[6,"Item","",""],[11,"next","","",11],[6,"Iter","",""],[11,"uri_mappings","","",10],[0,"reader","xml","Contains high-level interface for a pull-based XML parser."],[3,"EventReader","xml::reader","Simple wrapper around an `std::old_io::Buffer` which provides pull-based XML parsing."],[3,"Events","","XML events iterator, created by `events()` method on `Parser`."],[0,"config","","Contains parser configuration structure."],[3,"ParserConfig","xml::reader::config","Parser configuration structure."],[12,"trim_whitespace","","Whether or not should whitespace be removed. Default is false.",12],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters.\nDefault is false.",12],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.\nDefault is false.",12],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",12],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged.\nDefault is true.",12],[11,"new","","Returns a new config with default values.",12],[11,"trim_whitespace","","Sets the field to the provided value and returns updated config object.",12],[11,"whitespace_to_characters","","Sets the field to the provided value and returns updated config object.",12],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",12],[11,"ignore_comments","","Sets the field to the provided value and returns updated config object.",12],[11,"coalesce_characters","","Sets the field to the provided value and returns updated config object.",12],[0,"events","xml::reader","Contains `XmlEvent` datatype, instances of which are emitted by the parser."],[4,"XmlEvent","xml::reader::events","An element of an XML input stream."],[13,"StartDocument","","Corresponds to XML document declaration.",13],[12,"version","xml::reader::events::XmlEvent","XML version.",13],[12,"encoding","","XML document encoding.",13],[12,"standalone","","XML standalone declaration.",13],[13,"EndDocument","xml::reader::events","Denotes to the end of the document stream.",13],[13,"ProcessingInstruction","","Denotes an XML processing instruction.",13],[12,"name","xml::reader::events::XmlEvent","Processing instruction target.",13],[12,"data","","Processing instruction content.",13],[13,"StartElement","xml::reader::events","Denotes a beginning of an XML element.",13],[12,"name","xml::reader::events::XmlEvent","Qualified name of the element.",13],[12,"attributes","","A list of attributes associated with the element.",13],[12,"namespace","","Contents of the namespace mapping at this point of the document.",13],[13,"EndElement","xml::reader::events","Denotes an end of an XML document.",13],[12,"name","xml::reader::events::XmlEvent","Qualified name of the element.",13],[13,"CData","xml::reader::events","Denotes CDATA content.",13],[13,"Comment","","Denotes a comment.",13],[13,"Characters","","Denotes character data outside of tags.",13],[13,"Whitespace","","Denotes a chunk of whitespace outside of tags.",13],[13,"Error","","Denotes parsing error.",13],[11,"clone","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"fmt","","",13],[11,"as_writer_event","","",13],[11,"new","xml::reader","Creates a new parser, consuming given `Buffer`.",14],[11,"new_with_config","","Creates a new parser with the provded configuration, consuming given `Buffer`.",14],[11,"next","","Pulls and returns next XML event from the stream.",14],[11,"events","","Returns an iterator over XML events.",14],[6,"Item","",""],[11,"next","","",15],[11,"new_from_string","","Convenience method to create a reader from an owned string.",14],[11,"new_from_bytes","","Convenience method to create a reader from an owned vector of bytes.",14],[11,"new_from_str_slice","","Convenience method to create a reader from a string slice.",14],[11,"new_from_bytes_slice","","Convenience method to create a reader from a slice of bytes.",14],[0,"writer","xml",""],[3,"EventWriter","xml::writer",""],[0,"config","","Contains emitter configuration structure."],[3,"EmitterConfig","xml::writer::config","Emitter configuration structure."],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `\"\\n\"`.",16],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `\"  \"`\n(two spaces).",16],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",16],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document.\nDefault is true.",16],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",16],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",16],[11,"new","","Creates an emitter configuration with default values.",16],[11,"line_separator","","Sets the field to the provided value and returns updated config object.",16],[11,"indent_string","","Sets the field to the provided value and returns updated config object.",16],[11,"perform_indent","","Sets the field to the provided value and returns updated config object.",16],[11,"write_document_declaration","","Sets the field to the provided value and returns updated config object.",16],[11,"normalize_empty_elements","","Sets the field to the provided value and returns updated config object.",16],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",16],[0,"events","xml::writer",""],[4,"XmlEvent","xml::writer::events","An element of an XML output stream."],[13,"StartDocument","","Corresponds to XML document declaration.",17],[12,"version","xml::writer::events::XmlEvent","XML version.",17],[12,"encoding","","XML document encoding.",17],[12,"standalone","","XML standalone declaration.",17],[13,"ProcessingInstruction","xml::writer::events","Denotes an XML processing instruction.",17],[12,"name","xml::writer::events::XmlEvent","Processing instruction target.",17],[12,"data","","Processing instruction content.",17],[13,"StartElement","xml::writer::events","Denotes a beginning of an XML element.",17],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",17],[12,"attributes","","A list of attributes associated with the element.",17],[12,"namespace","","Contents of the namespace mapping at this point of the document.",17],[13,"EndElement","xml::writer::events","Denotes an end of an XML document.",17],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",17],[13,"CData","xml::writer::events","Denotes CDATA content.",17],[13,"Comment","","Denotes a comment.",17],[13,"Characters","","Denotes character data outside of tags.",17],[6,"EventWriterResult","xml::writer",""],[11,"new","","",18],[11,"new_with_config","","",18],[11,"write","","",18],[11,"new_into_mem","","",18],[11,"new_into_mem_config","","",18],[0,"util","xml",""],[3,"ClonedPairwise","xml::util",""],[8,"OptionBorrowExt","",""],[10,"borrow_internals","","",19],[8,"IteratorClonedPairwiseExt","",""],[10,"cloned_pairwise","","",20],[11,"borrow_internals","core::option","",21],[6,"Item","xml::util",""],[11,"next","","",22]],"paths":[[3,"Name"],[3,"OwnedName"],[3,"Attribute"],[3,"OwnedAttribute"],[4,"XmlVersion"],[8,"HasPosition"],[3,"Error"],[8,"NamespaceIterable"],[3,"Namespace"],[3,"NamespaceMappings"],[3,"NamespaceStack"],[3,"NamespaceStackMappings"],[3,"ParserConfig"],[4,"XmlEvent"],[3,"EventReader"],[3,"Events"],[3,"EmitterConfig"],[4,"XmlEvent"],[3,"EventWriter"],[8,"OptionBorrowExt"],[8,"IteratorClonedPairwiseExt"],[4,"Option"],[3,"ClonedPairwise"]]};

searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator."],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs."]],"paths":[]};

initSearch(searchIndex);
